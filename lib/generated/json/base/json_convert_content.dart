// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flutter/material.dart' show debugPrint;
import 'package:omt/bean/camera/camera_entity.dart';
import 'package:omt/bean/common/code_data.dart';
import 'package:omt/bean/common/id_name_value.dart';
import 'package:omt/bean/common/linkage_data.dart';
import 'package:omt/bean/common/location_data_entity.dart';
import 'package:omt/bean/common/name_value.dart';
import 'package:omt/bean/home/home_page/device_detail_ai_entity.dart';
import 'package:omt/bean/home/home_page/device_detail_camera_entity.dart';
import 'package:omt/bean/home/home_page/device_detail_exchange_entity.dart';
import 'package:omt/bean/home/home_page/device_detail_nvr_entity.dart';
import 'package:omt/bean/home/home_page/device_detail_power_box_entity.dart';
import 'package:omt/bean/home/home_page/device_detail_power_entity.dart';
import 'package:omt/bean/home/home_page/device_entity.dart';
import 'package:omt/bean/home/home_page/home_page_data.dart';
import 'package:omt/bean/one_picture/one_picture/one_picture_data_entity.dart';
import 'package:omt/bean/user/user_login/user_login_data.dart';
import 'package:omt/bean/user/ver_info.dart';
import 'package:omt/bean/video/video_configuration/Video_Connect_entity.dart';
import 'package:omt/bean/video/video_configuration/video_configuration_data.dart';
import 'package:omt/bean/video/video_frame/video_frame_data.dart';
import 'package:omt/bean/video/video_operations_center/video_operations_center_data.dart';

JsonConvert jsonConvert = JsonConvert();

typedef JsonConvertFunction<T> = T Function(Map<String, dynamic> json);
typedef EnumConvertFunction<T> = T Function(String value);
typedef ConvertExceptionHandler = void Function(Object error, StackTrace stackTrace);
extension MapSafeExt<K, V> on Map<K, V> {
  T? getOrNull<T>(K? key) {
    if (!containsKey(key) || key == null) {
      return null;
    } else {
      return this[key] as T?;
    }
  }
}

class JsonConvert {
  static ConvertExceptionHandler? onError;
  JsonConvertClassCollection convertFuncMap = JsonConvertClassCollection();

  /// When you are in the development, to generate a new model class, hot-reload doesn't find new generation model class, you can build on MaterialApp method called jsonConvert. ReassembleConvertFuncMap (); This method only works in a development environment
  /// https://flutter.cn/docs/development/tools/hot-reload
  /// class MyApp extends StatelessWidget {
  ///    const MyApp({Key? key})
  ///        : super(key: key);
  ///
  ///    @override
  ///    Widget build(BuildContext context) {
  ///      jsonConvert.reassembleConvertFuncMap();
  ///      return MaterialApp();
  ///    }
  /// }
  void reassembleConvertFuncMap() {
    bool isReleaseMode = const bool.fromEnvironment('dart.vm.product');
    if (!isReleaseMode) {
      convertFuncMap = JsonConvertClassCollection();
    }
  }

  T? convert<T>(dynamic value, {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    if (value is T) {
      return value;
    }
    try {
      return _asT<T>(value, enumConvert: enumConvert);
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return null;
    }
  }

  List<T?>? convertList<T>(List<dynamic>? value,
      {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return value.map((dynamic e) => _asT<T>(e, enumConvert: enumConvert))
          .toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return <T>[];
    }
  }

  List<T>? convertListNotNull<T>(dynamic value,
      {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return (value as List<dynamic>).map((dynamic e) =>
      _asT<T>(e, enumConvert: enumConvert)!).toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return <T>[];
    }
  }

  T? _asT<T extends Object?>(dynamic value,
      {EnumConvertFunction? enumConvert}) {
    final String type = T.toString();
    final String valueS = value.toString();
    if (enumConvert != null) {
      return enumConvert(valueS) as T;
    } else if (type == "String") {
      return valueS as T;
    } else if (type == "int") {
      final int? intValue = int.tryParse(valueS);
      if (intValue == null) {
        return double.tryParse(valueS)?.toInt() as T?;
      } else {
        return intValue as T;
      }
    } else if (type == "double") {
      return double.parse(valueS) as T;
    } else if (type == "DateTime") {
      return DateTime.parse(valueS) as T;
    } else if (type == "bool") {
      if (valueS == '0' || valueS == '1') {
        return (valueS == '1') as T;
      }
      return (valueS == 'true') as T;
    } else if (type == "Map" || type.startsWith("Map<")) {
      return value as T;
    } else {
      if (convertFuncMap.containsKey(type)) {
        if (value == null) {
          return null;
        }
        var covertFunc = convertFuncMap[type]!;
        if (covertFunc is Map<String, dynamic>) {
          return covertFunc(value as Map<String, dynamic>) as T;
        } else {
          return covertFunc(Map<String, dynamic>.from(value)) as T;
        }
      } else {
        throw UnimplementedError(
            '$type unimplemented,you can try running the app again');
      }
    }
  }

  //list is returned by type
  static M? _getListChildType<M>(List<Map<String, dynamic>> data) {
    if (<CameraHttpEntity>[] is M) {
      return data.map<CameraHttpEntity>((Map<String, dynamic> e) =>
          CameraHttpEntity.fromJson(e)).toList() as M;
    }
    if (<CameraInfoEntity>[] is M) {
      return data.map<CameraInfoEntity>((Map<String, dynamic> e) =>
          CameraInfoEntity.fromJson(e)).toList() as M;
    }
    if (<CodeMessageData>[] is M) {
      return data.map<CodeMessageData>((Map<String, dynamic> e) =>
          CodeMessageData.fromJson(e)).toList() as M;
    }
    if (<CommonPageData>[] is M) {
      return data.map<CommonPageData>((Map<String, dynamic> e) =>
          CommonPageData.fromJson(e)).toList() as M;
    }
    if (<IdNameValueEntity>[] is M) {
      return data.map<IdNameValueEntity>((Map<String, dynamic> e) =>
          IdNameValueEntity.fromJson(e)).toList() as M;
    }
    if (<IdNameValue>[] is M) {
      return data.map<IdNameValue>((Map<String, dynamic> e) =>
          IdNameValue.fromJson(e)).toList() as M;
    }
    if (<LinkKage>[] is M) {
      return data.map<LinkKage>((Map<String, dynamic> e) =>
          LinkKage.fromJson(e)).toList() as M;
    }
    if (<LinkKageType>[] is M) {
      return data.map<LinkKageType>((Map<String, dynamic> e) =>
          LinkKageType.fromJson(e)).toList() as M;
    }
    if (<LocationData>[] is M) {
      return data.map<LocationData>((Map<String, dynamic> e) =>
          LocationData.fromJson(e)).toList() as M;
    }
    if (<NameValue>[] is M) {
      return data.map<NameValue>((Map<String, dynamic> e) =>
          NameValue.fromJson(e)).toList() as M;
    }
    if (<DeviceDetailAiEntity>[] is M) {
      return data.map<DeviceDetailAiEntity>((Map<String, dynamic> e) =>
          DeviceDetailAiEntity.fromJson(e)).toList() as M;
    }
    if (<DeviceDetailAiData>[] is M) {
      return data.map<DeviceDetailAiData>((Map<String, dynamic> e) =>
          DeviceDetailAiData.fromJson(e)).toList() as M;
    }
    if (<DeviceDetailCameraEntity>[] is M) {
      return data.map<DeviceDetailCameraEntity>((Map<String, dynamic> e) =>
          DeviceDetailCameraEntity.fromJson(e)).toList() as M;
    }
    if (<DeviceDetailCameraData>[] is M) {
      return data.map<DeviceDetailCameraData>((Map<String, dynamic> e) =>
          DeviceDetailCameraData.fromJson(e)).toList() as M;
    }
    if (<DeviceDetailCameraDataPhoto>[] is M) {
      return data.map<DeviceDetailCameraDataPhoto>((Map<String, dynamic> e) =>
          DeviceDetailCameraDataPhoto.fromJson(e)).toList() as M;
    }
    if (<DeviceDetailExchangeEntity>[] is M) {
      return data.map<DeviceDetailExchangeEntity>((Map<String, dynamic> e) =>
          DeviceDetailExchangeEntity.fromJson(e)).toList() as M;
    }
    if (<DeviceDetailExchangeData>[] is M) {
      return data.map<DeviceDetailExchangeData>((Map<String, dynamic> e) =>
          DeviceDetailExchangeData.fromJson(e)).toList() as M;
    }
    if (<DeviceDetailNvrEntity>[] is M) {
      return data.map<DeviceDetailNvrEntity>((Map<String, dynamic> e) =>
          DeviceDetailNvrEntity.fromJson(e)).toList() as M;
    }
    if (<DeviceDetailNvrData>[] is M) {
      return data.map<DeviceDetailNvrData>((Map<String, dynamic> e) =>
          DeviceDetailNvrData.fromJson(e)).toList() as M;
    }
    if (<DeviceDetailNvrDataChannels>[] is M) {
      return data.map<DeviceDetailNvrDataChannels>((Map<String, dynamic> e) =>
          DeviceDetailNvrDataChannels.fromJson(e)).toList() as M;
    }
    if (<DeviceDetailPowerBoxEntity>[] is M) {
      return data.map<DeviceDetailPowerBoxEntity>((Map<String, dynamic> e) =>
          DeviceDetailPowerBoxEntity.fromJson(e)).toList() as M;
    }
    if (<DeviceDetailPowerBoxData>[] is M) {
      return data.map<DeviceDetailPowerBoxData>((Map<String, dynamic> e) =>
          DeviceDetailPowerBoxData.fromJson(e)).toList() as M;
    }
    if (<DeviceDetailPowerBoxDataDcInterfaces>[] is M) {
      return data.map<DeviceDetailPowerBoxDataDcInterfaces>((
          Map<String, dynamic> e) =>
          DeviceDetailPowerBoxDataDcInterfaces.fromJson(e)).toList() as M;
    }
    if (<DeviceDetailPowerEntity>[] is M) {
      return data.map<DeviceDetailPowerEntity>((Map<String, dynamic> e) =>
          DeviceDetailPowerEntity.fromJson(e)).toList() as M;
    }
    if (<DeviceDetailPowerData>[] is M) {
      return data.map<DeviceDetailPowerData>((Map<String, dynamic> e) =>
          DeviceDetailPowerData.fromJson(e)).toList() as M;
    }
    if (<DeviceEntity>[] is M) {
      return data.map<DeviceEntity>((Map<String, dynamic> e) =>
          DeviceEntity.fromJson(e)).toList() as M;
    }
    if (<HomePageData>[] is M) {
      return data.map<HomePageData>((Map<String, dynamic> e) =>
          HomePageData.fromJson(e)).toList() as M;
    }
    if (<OnePictureDataEntity>[] is M) {
      return data.map<OnePictureDataEntity>((Map<String, dynamic> e) =>
          OnePictureDataEntity.fromJson(e)).toList() as M;
    }
    if (<OnePictureDataData>[] is M) {
      return data.map<OnePictureDataData>((Map<String, dynamic> e) =>
          OnePictureDataData.fromJson(e)).toList() as M;
    }
    if (<OnePictureDataDataChildren>[] is M) {
      return data.map<OnePictureDataDataChildren>((Map<String, dynamic> e) =>
          OnePictureDataDataChildren.fromJson(e)).toList() as M;
    }
    if (<OnePictureDataDataChildrenChildren>[] is M) {
      return data.map<OnePictureDataDataChildrenChildren>((
          Map<String, dynamic> e) =>
          OnePictureDataDataChildrenChildren.fromJson(e)).toList() as M;
    }
    if (<OnePictureDataDataChildrenChildrenChildren>[] is M) {
      return data.map<OnePictureDataDataChildrenChildrenChildren>((
          Map<String, dynamic> e) =>
          OnePictureDataDataChildrenChildrenChildren.fromJson(e)).toList() as M;
    }
    if (<UserInfoData>[] is M) {
      return data.map<UserInfoData>((Map<String, dynamic> e) =>
          UserInfoData.fromJson(e)).toList() as M;
    }
    if (<UserPermission>[] is M) {
      return data.map<UserPermission>((Map<String, dynamic> e) =>
          UserPermission.fromJson(e)).toList() as M;
    }
    if (<VerInfo>[] is M) {
      return data.map<VerInfo>((Map<String, dynamic> e) => VerInfo.fromJson(e))
          .toList() as M;
    }
    if (<VerInfoRet>[] is M) {
      return data.map<VerInfoRet>((Map<String, dynamic> e) =>
          VerInfoRet.fromJson(e)).toList() as M;
    }
    if (<VideoConnectEntity>[] is M) {
      return data.map<VideoConnectEntity>((Map<String, dynamic> e) =>
          VideoConnectEntity.fromJson(e)).toList() as M;
    }
    if (<VideoInfoEntity>[] is M) {
      return data.map<VideoInfoEntity>((Map<String, dynamic> e) =>
          VideoInfoEntity.fromJson(e)).toList() as M;
    }
    if (<VideoInfoCamEntity>[] is M) {
      return data.map<VideoInfoCamEntity>((Map<String, dynamic> e) =>
          VideoInfoCamEntity.fromJson(e)).toList() as M;
    }
    if (<VideoInfoRectEntity>[] is M) {
      return data.map<VideoInfoRectEntity>((Map<String, dynamic> e) =>
          VideoInfoRectEntity.fromJson(e)).toList() as M;
    }
    if (<VideoInfoOtherEntity>[] is M) {
      return data.map<VideoInfoOtherEntity>((Map<String, dynamic> e) =>
          VideoInfoOtherEntity.fromJson(e)).toList() as M;
    }
    if (<VideoConfigurationData>[] is M) {
      return data.map<VideoConfigurationData>((Map<String, dynamic> e) =>
          VideoConfigurationData.fromJson(e)).toList() as M;
    }
    if (<VideoFrameData>[] is M) {
      return data.map<VideoFrameData>((Map<String, dynamic> e) =>
          VideoFrameData.fromJson(e)).toList() as M;
    }
    if (<VideoOperationsCenterData>[] is M) {
      return data.map<VideoOperationsCenterData>((Map<String, dynamic> e) =>
          VideoOperationsCenterData.fromJson(e)).toList() as M;
    }

    debugPrint("$M not found");

    return null;
  }

  static M? fromJsonAsT<M>(dynamic json) {
    if (json is M) {
      return json;
    }
    if (json is List) {
      return _getListChildType<M>(
          json.map((dynamic e) => e as Map<String, dynamic>).toList());
    } else {
      return jsonConvert.convert<M>(json);
    }
  }
}

class JsonConvertClassCollection {
  Map<String, JsonConvertFunction> convertFuncMap = {
    (CameraHttpEntity).toString(): CameraHttpEntity.fromJson,
    (CameraInfoEntity).toString(): CameraInfoEntity.fromJson,
    (CodeMessageData).toString(): CodeMessageData.fromJson,
    (CommonPageData).toString(): CommonPageData.fromJson,
    (IdNameValueEntity).toString(): IdNameValueEntity.fromJson,
    (IdNameValue).toString(): IdNameValue.fromJson,
    (LinkKage).toString(): LinkKage.fromJson,
    (LinkKageType).toString(): LinkKageType.fromJson,
    (LocationData).toString(): LocationData.fromJson,
    (NameValue).toString(): NameValue.fromJson,
    (DeviceDetailAiEntity).toString(): DeviceDetailAiEntity.fromJson,
    (DeviceDetailAiData).toString(): DeviceDetailAiData.fromJson,
    (DeviceDetailCameraEntity).toString(): DeviceDetailCameraEntity.fromJson,
    (DeviceDetailCameraData).toString(): DeviceDetailCameraData.fromJson,
    (DeviceDetailCameraDataPhoto).toString(): DeviceDetailCameraDataPhoto
        .fromJson,
    (DeviceDetailExchangeEntity).toString(): DeviceDetailExchangeEntity
        .fromJson,
    (DeviceDetailExchangeData).toString(): DeviceDetailExchangeData.fromJson,
    (DeviceDetailNvrEntity).toString(): DeviceDetailNvrEntity.fromJson,
    (DeviceDetailNvrData).toString(): DeviceDetailNvrData.fromJson,
    (DeviceDetailNvrDataChannels).toString(): DeviceDetailNvrDataChannels
        .fromJson,
    (DeviceDetailPowerBoxEntity).toString(): DeviceDetailPowerBoxEntity
        .fromJson,
    (DeviceDetailPowerBoxData).toString(): DeviceDetailPowerBoxData.fromJson,
    (DeviceDetailPowerBoxDataDcInterfaces)
        .toString(): DeviceDetailPowerBoxDataDcInterfaces.fromJson,
    (DeviceDetailPowerEntity).toString(): DeviceDetailPowerEntity.fromJson,
    (DeviceDetailPowerData).toString(): DeviceDetailPowerData.fromJson,
    (DeviceEntity).toString(): DeviceEntity.fromJson,
    (HomePageData).toString(): HomePageData.fromJson,
    (OnePictureDataEntity).toString(): OnePictureDataEntity.fromJson,
    (OnePictureDataData).toString(): OnePictureDataData.fromJson,
    (OnePictureDataDataChildren).toString(): OnePictureDataDataChildren
        .fromJson,
    (OnePictureDataDataChildrenChildren)
        .toString(): OnePictureDataDataChildrenChildren.fromJson,
    (OnePictureDataDataChildrenChildrenChildren)
        .toString(): OnePictureDataDataChildrenChildrenChildren.fromJson,
    (UserInfoData).toString(): UserInfoData.fromJson,
    (UserPermission).toString(): UserPermission.fromJson,
    (VerInfo).toString(): VerInfo.fromJson,
    (VerInfoRet).toString(): VerInfoRet.fromJson,
    (VideoConnectEntity).toString(): VideoConnectEntity.fromJson,
    (VideoInfoEntity).toString(): VideoInfoEntity.fromJson,
    (VideoInfoCamEntity).toString(): VideoInfoCamEntity.fromJson,
    (VideoInfoRectEntity).toString(): VideoInfoRectEntity.fromJson,
    (VideoInfoOtherEntity).toString(): VideoInfoOtherEntity.fromJson,
    (VideoConfigurationData).toString(): VideoConfigurationData.fromJson,
    (VideoFrameData).toString(): VideoFrameData.fromJson,
    (VideoOperationsCenterData).toString(): VideoOperationsCenterData.fromJson,
  };

  bool containsKey(String type) {
    return convertFuncMap.containsKey(type);
  }

  JsonConvertFunction? operator [](String key) {
    return convertFuncMap[key];
  }
}